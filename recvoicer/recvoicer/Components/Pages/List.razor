@page "/list"

@inject NavigationManager uriHelper;

<div class="flex-column mt3">
    <div class="f5 mb2" id="list-header">
        RECORDING LIST
    </div>
    @if (allAudioList != null)
    {
        @foreach (KeyValuePair<string, string> entry in allAudioList)
        {
            <div class="f5 mb2 recording">
                @entry.Key.Substring(21)<span class="more" @onclick="() => GetRecording(entry.Value)">▼</span>
                <div class="more-info" style="display: none;">
                    @if (@RecordingStr != "")
                    {
                        <span class="date">@entry.Key.Substring(0, 19)</span>
                        <span class="edit" @onclick="() => OpenEdit(entry.Value)">✎</span>
                        <span class="remove" @onclick="OpenRemove">🗑</span>
                        <audio controls src="@File.ReadAllText(RecordingStr)">Your browser does not support the audio element.</audio>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div id="recordings-info">no recordings yet</div>
    }

    @if (IsEditDialogOpen)
    {
        <div class="dialogBox">
            <span>Edit the name of recording</span>
            <input @bind="NewRecordingName" placeholder="name" type="text" name="name" autofocus />
            <span id="button-box">
                <button @onclick="ConfirmEdit">SAVE</button>
                <button @onclick="CancelEdit" style="color: rgba(0, 0, 0, .6)">CANCEL</button>
            </span>
        </div>
    }

    @if (IsRemoveDialogOpen)
    {
        <div class="dialogBox">
            <span>Remove the recording</span>
            <span id="button-box">
                <button @onclick="ConfirmRemove">CONFIRM</button>
                <button @onclick="CancelRemove" style="color: rgba(0, 0, 0, .6)">CANCEL</button>
            </span>
        </div>
    }
</div>

<script>
    recordings = document.querySelectorAll(".recording");

    recordings.forEach((e) => {
        e.isOpen = false;
        e.addEventListener("click", () => {
            const moreInfo = e.querySelector(" .more-info");
            if (!e.isOpen) {
                recordings.forEach((e) => {
                    e.querySelector(" .more-info").style.display = "none";
                    e.querySelector(".more").innerHTML = "▼";
                    e.isOpen = false;
                });

                e.querySelector(".more").innerHTML = "▲";

                moreInfo.style.display = "block";
            } else {
                e.querySelector(".more").innerHTML = "▼";

                moreInfo.style.display = "none";
            }
            e.isOpen = !e.isOpen;
        });
    });
</script>

@code {
    private SortedDictionary<string, string> allAudioList = null;
    private string RecordingStr = "";

    private bool IsEditDialogOpen = false;
    private string RecordingLastPath = "";
    private string NewRecordingName = "";

    private bool IsRemoveDialogOpen = false;

    protected override async Task OnInitializedAsync()
    {
        allAudioList = GetAllAudioList();
    }

    private SortedDictionary<string, string> GetAllAudioList()
    {
        string directoryPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
        directoryPath = Path.Combine(directoryPath, @"\recvoicer");
        Directory.CreateDirectory(directoryPath);

        Dictionary<string, string> audioList = new Dictionary<string, string> { };

        string[] filesName = Directory.GetFiles(directoryPath);

        bool isEmpty = true;
        foreach (string filePath in filesName)
        {
            audioList.Add(Path.GetFileNameWithoutExtension(filePath), filePath);
            isEmpty = false;
        }

        if (!isEmpty)
        {
            return new SortedDictionary<string, string>(audioList);
        }
        else
        {
            return null;
        }
    }

    public async void GetRecording(string filePath)
    {
        RecordingStr = filePath;
        StateHasChanged();
    }

    private void OpenEdit(string path)
    {
        if (!IsRemoveDialogOpen && !IsEditDialogOpen)
        {
            RecordingLastPath = path;
            IsEditDialogOpen = true;
        }
    }
    private void ConfirmEdit()
    {
        IsEditDialogOpen = false;

        if (!(NewRecordingName == "")){
            string currentFileName = Path.GetFileName(RecordingLastPath);

            NewRecordingName = $"{currentFileName.Substring(0, 19)} - {NewRecordingName}.txt";

            if (!currentFileName.Equals(NewRecordingName))
            {
                string directoryPath = Path.GetDirectoryName(RecordingLastPath);

                string newFilePath = Path.Combine(directoryPath, NewRecordingName);

                File.Move(RecordingLastPath, newFilePath);
                NewRecordingName = RecordingLastPath + " : " + newFilePath;

                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }
            NewRecordingName = "";
        }
    }
    private void CancelEdit()
    {
        IsEditDialogOpen = false;
    }

    private void OpenRemove()
    {
        if (!IsRemoveDialogOpen && !IsEditDialogOpen)
        {
            IsRemoveDialogOpen = true;
        }
    }
    private void ConfirmRemove()
    {
        IsRemoveDialogOpen = false;
    }
    private void CancelRemove()
    {
        IsRemoveDialogOpen = false;
    }
}