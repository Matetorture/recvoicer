@page "/list"

<div class="flex-column mt3">
    <div class="f5 mb2" id="list-header">
        RECORDING LIST
    </div>
    @if (allAudioList != null)
    {
        @foreach (KeyValuePair<string, string> entry in allAudioList)
        {
            <div class="f5 mb2 recording">
                @entry.Key.Substring(21)<span class="more" @onclick="() => GetRecording(entry.Value)">▼</span>
                <div class="more-info" style="display: none;">
                    @if (@RecordingStr != ""){
                        <span class="date">@entry.Key.Substring(0, 19)</span>
                        <span class="remove">🗑</span>
                        <span class="edit">✎</span>
                        <audio controls src="@File.ReadAllText(RecordingStr)">Your browser does not support the audio element.</audio>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div id="recordings-info">no recordings yet</div>
    }
</div>

<script>
    recordings = document.querySelectorAll(".recording");

    recordings.forEach((e) => {
        e.isOpen = false;
        e.addEventListener("click", () => {
            const moreInfo = e.querySelector(" .more-info");
            if (!e.isOpen) {
                recordings.forEach((e) => {
                    e.querySelector(" .more-info").style.display = "none";
                    e.querySelector(".more").innerHTML = "▼";
                    e.isOpen = false;
                });

                e.querySelector(".more").innerHTML = "▲";

                moreInfo.style.display = "block";
            } else {
                e.querySelector(".more").innerHTML = "▼";

                moreInfo.style.display = "none";
            }
            e.isOpen = !e.isOpen;
        });
    });
</script>

@code {
    private SortedDictionary<string, string> allAudioList = null;
    private string RecordingStr { get; set; } = ""; 

    protected override async Task OnInitializedAsync()
    {
        allAudioList = GetAllAudioList();
    }

    private SortedDictionary<string, string> GetAllAudioList()
    {
        string directoryPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
        directoryPath = Path.Combine(directoryPath, @"\recvoicer");
        Directory.CreateDirectory(directoryPath);

        Dictionary<string, string> audioList = new Dictionary<string, string> { };

        string[] filesName = Directory.GetFiles(directoryPath);

        bool isEmpty = true;
        foreach (string filePath in filesName)
        {
            audioList.Add(Path.GetFileNameWithoutExtension(filePath), filePath);
            isEmpty = false;
        }

        if(!isEmpty){
            return new SortedDictionary<string, string>(audioList);
        }else{
            return null;
        }
    }

    public async void GetRecording(string filePath)
    {
        RecordingStr = filePath;
        StateHasChanged();
    }
}