@page "/";

@inject AudioService AudioService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager uriHelper;

<link href="~/css/recorder.css" rel="stylesheet" />

<div class="flex-column mt3">
    <div class="f5 mb2">
            @if (!AudioService.IsRecording)
            {
                <div id="startRecording" class="recordingButton" @onclick="StartRecording"><span>START</span></div>
            }
            else
            {
                <div id="stopRecording" class="recordingButton" @onclick="StopRecording"><span>STOP</span></div>
            }
        <div id="timer">00:00:00.00</div>
    </div>
    @if (IsDialogOpen)
    {
        <div id="dialogBox">
            <span>Enter the name of recording</span>
            <input @bind="RecordingName" placeholder="name" type="text" name="name" autofocus />
            <span id="button-box">
                <button @onclick="ConfirmRecording">SAVE</button>
                <button @onclick="CancelRecording" style="color: rgba(0, 0, 0, .6)">CANCEL</button>
            </span>
        </div>
    }
</div>


<script>
    var timerInterval;

    document.querySelector("#startRecording").addEventListener("click", () => {
        const timer = document.querySelector('#timer');
        timer.innerText = "00:00:00.00";

        let ms = 0;
        let s = 0;
        let min = 0;
        let h = 0;

        timerInterval = setInterval(() => {
            ms++;

            if (ms == 100) {
                ms = 0;
                s++;
            }
            if (s == 60) {
                s = 0;
                min++;
            }
            if (min == 60) {
                min = 0;
                h++;
            }

            timer.innerText = `${h >= 10 ? h : "0" + h}:${min >= 10 ? min : "0" + min}:${s >= 10 ? s : "0" + s}.${ms >= 10 ? ms : "0" + ms}`;
        }, 10);
    });
    function stopTimer() {
        clearInterval(timerInterval);
    }
</script>

@code {
    private Stream recordedAudioStream;
    private string AudioSource;
    private string RecordingName = "";
    private bool IsDialogOpen = false;

    public async void StartRecording()
    {
        if (!IsDialogOpen) {
            if (await Permissions.RequestAsync<Permissions.Microphone>() != PermissionStatus.Granted)
            {
                // Inform user to request permission
            }
            else
            {
                await AudioService.StartRecordingAsync();
            }
        }
    }
    public async void StopRecording()
    {

        recordedAudioStream = await AudioService.StopRecordingAsync();

        IsDialogOpen = true;

        await JSRuntime.InvokeVoidAsync("stopTimer");
    }

    public async void ConfirmRecording()
    {
        IsDialogOpen = false;

        var audioBytes = new byte[recordedAudioStream.Length];
        await recordedAudioStream.ReadAsync(audioBytes, 0, (int)recordedAudioStream.Length);
        var base64String = Convert.ToBase64String(audioBytes);


        SaveRecording($"data:audio/mpeg;base64,{base64String}");
    }

    private void SaveRecording(string audio)
    {
        string directoryPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
        directoryPath = Path.Combine(directoryPath, @"\recvoicer");
        Directory.CreateDirectory(directoryPath);

        if(RecordingName == ""){
            RecordingName = "new";
        }

        string filePath = Path.Combine(directoryPath, $"{DateTime.Now.ToString()} - {RecordingName}.txt");

        File.WriteAllText(filePath, audio);

        RecordingName = "";

        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    private void CancelRecording()
    {
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
}